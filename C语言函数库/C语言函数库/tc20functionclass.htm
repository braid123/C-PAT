<HTML>
<HEAD >
<TITLE>嵌入式软件设计教学网站</TITLE>

<!-- <base href=D:\自编图书\教学网站设计\主页\> -->
<!-- <base href=www.hfut.edu.cn\teacher\peng\c\> --> 

<META NAME="作者" long="zh", CONTENT="彭良清">
<META NAME="标题", CONTENT="嵌入式软件设计教学网站 ">
<META NAME="关键字", CONTENT="嵌入式软件设计教学网站 C语言 数据结构 
   实时操作系统 RTOS TC20  TC2.0 Turbo C2.0  人机界面  菜单设计 C51
   合肥工业大学 精密仪器系  彭良清 源代码阅读 ">
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">

<STYLE type=text/css>

p.texthead {line-height:15pt;font-size:10pt;font-family:宋体;text-align:left; color:rgb(100,150,255);
font-weight:bold;font-style:normal; text-indent:0em; text-decoration:underline;
padding-top:0em;padding-bottom:0em;padding-left:2em;padding-right:2em;margin-top:0em;margin-bottom:0em}

p.text {line-height:15pt;font-size:9pt;font-family:宋体;text-align:justify;
font-weight:normal;font-style:normal; text-indent:0em; 
padding-top:0em;padding-bottom:0em;  padding-left:0em;padding-right:0em;     margin-top:0em;margin-bottom:0em}

table.tc20funcation { border:1px solid black; width:90%; align:center;
padding-top:10em;padding-bottom:10em;  padding-left:5em;padding-right:5em; 
margin-top:2em;margin-bottom:2em;margin-left:2em;margin-right:0em;
  
}

table.tc20funcationname { border:0px solid black; width:90%; align:center;
padding-top:10em;padding-bottom:10em;  padding-left:5em;padding-right:5em; 
margin-top:2em;margin-bottom:2em;margin-left:2em;margin-right:0em;
  
}

font.firstletter { font-size:14pt; font-weight:normal;font-style:normal; color:red }

tr.funtableline {height:100%;vertical-align:top;width:100%};
tr.funnameline {height:100%;vertical-align:top; text-align:center; width:90%;
padding-top:0em;padding-bottom:0em;padding-left:2em;padding-right:2em;margin-top:0em;margin-bottom:0em
};


tr.trwindowline {height:100%;vertical-align:top; text-align:center; width:90%;font-size:9pt;font-family:宋体;
padding-top:0em;padding-bottom:0em;padding-left:2em;padding-right:2em;margin-top:0em;margin-bottom:0em
};

TD.tditem {border:1px solid BLACK; padding:0em; line-height:15pt;font-size:10pt;font-family:宋体;text-align:left; 
font-weight:bold;font-style:BLUE; text-indent:0em; vertical-align:top; 
margin-top:0em;margin-bottom:0em}

TD.tdtext {border:0px solid BLACK; line-height:15pt;font-size:9pt;font-family:宋体;text-align:left; vertical-align:top;
font-weight:normal;font-style:BLUE; text-indent:0em; 
padding-top:0em;padding-bottom:0em;  padding-left:1em;padding-right:0em;     margin-top:0em;margin-bottom:0em}

TD.tdhead {border:0px solid BLACK; line-height:15pt;font-size:10pt;font-family:宋体;text-align:center; vertical-align:middle;
font-weight:normal;font-style:BLUE; text-indent:0em; 
padding-top:0em;padding-bottom:0em;  padding-left:1em;padding-right:0em;     margin-top:0em;margin-bottom:0em}

p.linktext {line-height:15pt;font-size:10pt;font-family:宋体;text-align:justify;
font-weight:normal;font-style:normal; text-indent:0em; 
padding-top:2em;padding-bottom:0em;  padding-left:2em;padding-right:2em;     margin-top:0em;margin-bottom:2em}

ol.content{line-height:15pt;font-size:10pt;font-family:宋体;text-align:justify;
font-weight:normal;font-style:normal; text-indent:0em; 
padding-top:0em;padding-bottom:0em;   padding-left:2em;padding-right:2em;    margin-top:0em;margin-bottom:2em}

tr.bottomtext {line-height:15pt;font-size:10pt;font-family:宋体;font-weight:normal;font-style:normal}

A.top:link {text-decoration:none;color:#ff0000;line-height:150%; font-size:9pt;font-family:宋体;font-weight:normal;font-style:normal}
A.top:visited {text-decoration:none;color:#ff0000;line-height:150%; font-size:9pt;font-family:宋体;font-weight:normal;font-style:normal}
A.top:active {text-decoration:none;color:#000000;line-height:150%; font-size:9pt;font-family:宋体;font-weight:normal;font-style:normal}
A.top:hover {text-decoration:none;color:#000000;line-height:150%;font-size:9pt;font-family:宋体;font-weight:normal;font-style:normal}

</STYLE>

<H3 ALIGN="center" >
<font size=5 color="#a2a2a2"   face="方正舒体">
	Turbo C2.0集成编译环境使用:
</font>

<font size=6 color="#808080" face="华文新魏">
	函数库功能分类速查
</font>
</h3>
<HR WIDTH=70% ALIGN=CENTER SIZE=3>
</H3>


</HEAD>


<BODY   background=image/bg3.gif text="#010101" bgcolor=white link="#008000" vlink="#008000" alink="#008000" >


<P ALIGN="CENTER" >
<font color="#ff0000" size="2">欢迎访问新版函数库，本库于<span lang="en-us">2002年8月28日</span>由原来的王大刚版本更换至彭良清版本，提供三种阅读方式。<br>
本资料来自合肥工业大学，版权所有，在收录本站时根据本站风格，版面稍做了调整，特此声明。</font></P>


<table border=1  width=90% align=center  rules=rows  frame=void cellspacing=0% 
cellpadding=5%  bgcolor=rgb(204,234,255) >

<!--  bgcolor=rgb(204,255,255) -->



<tr id="letter" class=funtableline>
<td>
<table class=tc20funcation>
<!--  border=1  width=90% align=center  rules=all  frame=box cellspacing=0% cellpadding=10% > -->
<col width=25%>
<col width=25%>
<col width=25%>
<col width=25%>

<tr>
<td CLASS=TDTEXT> <a href=tc20functionclass.htm#filefun> 文件操作函数</a></td>
<td CLASS=TDTEXT> <a href=tc20functionclass.htm#keyfun> 键盘输入函数</a></td>
<td CLASS=TDTEXT> <a href=tc20functionclass.htm#coniofun> 字符屏幕输出函数</a></td>
<td CLASS=TDTEXT> <a href=tc20functionclass.htm#graphfun> 图形屏幕输出函数</a></td>
</tr>


<tr>
<td CLASS=TDTEXT> <a href=tc20functionclass.htm#strfun>字符串函数 </a></td>
<td CLASS=TDTEXT> <a href=tc20functionclass.htm#memfun> 内存操作函数</a></td>
<td CLASS=TDTEXT> <a href=tc20functionclass.htm#mathfun> 数学函数</a></td>
<td CLASS=TDTEXT> <a href=tc20functionclass.htm#hardwarefun>硬件操作函数 </a></td>
</tr>

<tr>
<td CLASS=TDTEXT colspan=4> 
<p  class=text><br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br>

<tr>
<td CLASS=TDTEXT colspan=4> 

<p class=text>
<b>说明：</b><br>
&nbsp&nbsp&nbsp&nbsp1:本表按用途分类给出TurboC的主要函数，可供代码编写时的函数查阅。对于阅读代码时
所遇到的库函数，读者可通过查阅 <a  href=tc20function.htm>Turbo C库函数字母序速查</a>。
<br>
&nbsp&nbsp&nbsp&nbsp2:本表给出了TurboC2.0的主要函数，涵盖了所有的用途分类，
但未列出所有函数，读者在使用时应尽量使用ANSI C标准的C函数(文中加重显示)，这样可
保证代码的可移值性。
对于其他和系统平台相关的函数（如各种DOS操作函数，显示函数等）无需深入入了解。
<br>
&nbsp&nbsp&nbsp&nbsp3:如要了解所有ANSI C函数，请参阅文件<a  href=ansicfunction.htm>ANSI C标准函数库速查</a>

本表的函数是在TurboC2.0编译器的函数库，一些函数是TC20编译器专有的
，不在ANSI C标准之列，所有属于<b>ANSI C</b>标准的C函数<b>加重</b>显示，学习者对ANSI C标准的函数
应重点掌握，。<br>
</p>
</td></tr>
</table>
</td>
</tr>



<tr id="filefun" class=funnameline>
<td>
<table class=tc20funcationname >
<col width=20%>
<col width=20%>
<col width=50%>
<col width=10%>
<tr>
<td class=TDHEAD colspan=4 >
<b>文件操作函数</b>
</td>
<tr>

<tr>
<td CLASS=TDTEXT colspan=4>
<b>文件打开与关闭</b> 对于文件的操作包括对一个已经存在的文件进行修改（写文件），
得到文件的内容（读文件），或创建一个新的文件，在对文件进行有效的读写之前，
必须首先打开文件，否则无法对文件进行读写操作，而完成读写操作后，必须关闭文
件，否则对文件的修改不能保存到磁盘上。<br>
<b>文本文件和二进制文件</b> 文本文件的内容均是ASCII码或扩展ASCII码，或汉字
内码，均是可以显示的字符，除此之外的文件均是二进制文件，后者包含的内容不是
可显示的ASCII码，而是任意的二进制数据。前者如C源程序，后者如C执行代码。在文
本文件操作中，写入时将"回车"变成"换行"，输出进行反转换，二进制文件无此转换，
在C函数中，有些函数是专门真对文本文件的，每次只读出或写入一行字符。<br>
&nbsp&nbsp&nbsp&nbsp对于文件操作函数，区分文本文件和非文本文件是以文件的打
开方式决定的，而不是由文件是否是可显示的ASCII码文件决定。<br>
<b>顺序读和随机读</b>	顺序读是文件打开后从文件的开始顺序读取文件的所有
内容，而后者是从文件中间的任意位置对文件进行读或写操作。对文件进行随机读
写必须首先使用文件位置定位函数（如fseek()）。<br>
<b>头文件</b>  stdio.h  io.h<br>
<b>函数列表</b>
</td>
</tr>

<tr>
<td CLASS=TDTEXT> 函数类别</td>
<td CLASS=TDTEXT> 函数用途</td>
<td CLASS=TDTEXT> 函数申明</td>
<td CLASS=TDTEXT> 详细说明</td>
</tr>

<tr>
<td CLASS=TDTEXT> 文件打开和关闭</td>
<td CLASS=TDTEXT> 打开文件</td>
<td CLASS=TDTEXT> FILE *fopen(char *filename, char *mode)</td>
<td CLASS=TDTEXT> <a  href=tc20functionf.htm#fopen> fopen</a></td>
</tr>

<tr>
<td CLASS=TDTEXT>  </td>
<td CLASS=TDTEXT>  关闭文件</td>
<td CLASS=TDTEXT>  int  fclose(FILE *fp)</td>
<td CLASS=TDTEXT> <a  href=tc20functionf.htm#fclose> fclose </a></td>
</tr>

<tr>
<td CLASS=TDTEXT> 文件定位 </td>
<td CLASS=TDTEXT> 任意位置定位  </td>
<td CLASS=TDTEXT> int  fseek( FILE *stream, long offset, int origin  )</td>
<td CLASS=TDTEXT> <a  href=tc20functionf.htm#fseek>fseek </a></td>
</tr>


<tr>
<td CLASS=TDTEXT>  </td>
<td CLASS=TDTEXT> 回到文件开始 </td>
<td CLASS=TDTEXT> int  rewind（FILE *stream）</td>
<td CLASS=TDTEXT> <a  href=tc20functionr.htm#remind> remind</a></td>
</tr>

<tr>
<td CLASS=TDTEXT> 文件读出 </td>
<td CLASS=TDTEXT> 读一行文本文件 </td>
<td CLASS=TDTEXT> char *fgets(char *str, int num, FILE *stream )</td>
<td CLASS=TDTEXT> <a  href=tc20functionf.htm#fgets> fgets</a></td>
</tr>

<tr>
<td CLASS=TDTEXT>  </td>
<td CLASS=TDTEXT> 读二进制文件 </td>
<td CLASS=TDTEXT>int  fread(void *buf, int size ,int cout, FILE *stream ) </td>
<td CLASS=TDTEXT> <a  href=tc20functionf.htm#fread> fread</a></td>
</tr>

<tr>
<td CLASS=TDTEXT> 文件写入 </td>
<td CLASS=TDTEXT> 写一行文本文件 </td>
<td CLASS=TDTEXT> char *fputs(char *str, FILE *stream )</td>
<td CLASS=TDTEXT> <a  href=tc20functionf.htm#fputs> fputs</a></td>
</tr>

<tr>
<td CLASS=TDTEXT>  </td>
<td CLASS=TDTEXT> 写二进制文件 </td>
<td CLASS=TDTEXT>int  fwrite(void *buf, int size ,int cout, FILE *stream ) </td>
<td CLASS=TDTEXT> <a  href=tc20functionf.htm#fwrite> fwrite</a></td>
</tr>

</table>  <!-- class=tc20funcationname end -->
</td>
</tr>     <!-- class=funnameline -->




<tr id="keyfun" class=funnameline>
<td>
<table class=tc20funcationname >
<col width=20%>
<col width=20%>
<col width=50%>
<col width=10%>
<tr>
<td class=TDHEAD colspan=4 >
<b>  键盘操作函数</b>
</td>
<tr>

<tr>
<td CLASS=TDTEXT colspan=4>
<b>输入数据的分类</b> 从应用的角度来说键盘输入的数据包括以下几种：<br>
&nbsp&nbsp&nbsp&nbsp<b>字符：</b> 包括中文、英文、数字和其他和可显示ASCII码符号，一次输入一个字符。<br>
&nbsp&nbsp&nbsp&nbsp<b>字符串：</b> 包括中文、英文、数字和其他和可显示ASCII码符号，连续输入多个，一般以
"回车键"表示输入结束。<br>
&nbsp&nbsp&nbsp&nbsp<b>数值：</b> 包括整型和实型。<br>
&nbsp&nbsp&nbsp&nbsp<b>控制键：</b> 包括光标键（↑ ↓ ← →），功能键（F1-F12），回车（ENTER）、插入（Ins）、
退出(ESC)等,<br>
&nbsp&nbsp&nbsp&nbsp不同的应用必须使用不同的函数，不同的函数对同样的键盘输入得到的结果会有区别， 
虽然一些函数可用于多种用途的输入，但得到的输入结果需要进行附加的处理。<br>
<b>键盘输入的屏幕回显</b> 另外一个问题是，有些键盘输入函数是不回显的，有些函数在得到键盘输入的结果的同时也将
该键的编码在屏幕上显示输出。在使用时必须加以区分和选择。有时侯，我们需要一个特殊效
果和位置的显示，并不希望有键盘函数来自动显示输入的字符。<br>
<b>输入等待</b>  在使用键盘输入函数必须注意的另外一个问题就是，大部分键盘输入函数在当前没有
键盘输入时会一直等待有键输入时才会返回（如getch( )，getchar( )）,如果我们不
希望程序在键盘输入函数中等待，则必须先用函数检查键盘缓冲区是否有数据，在有数
据的情况下，再调用键盘函数，这种是否有键盘输入检查函数有：bioskey() 。<br>
<b>头文件</b>  stdio.h, conio.h, io.h,bios.h<br>
<b>函数列表</b>
</td>
</tr>

<tr>
<td CLASS=TDTEXT> 函数类别</td>
<td CLASS=TDTEXT> 函数用途</td>
<td CLASS=TDTEXT> 函数申明</td>
<td CLASS=TDTEXT> 详细说明</td>
</tr>

<tr>
<td CLASS=TDTEXT>控制键输入 </td>
<td CLASS=TDTEXT> 得到键盘输入的原始数值或状态</td>
<td CLASS=TDTEXT>int  bioskey(int cmd ) </td>
<td CLASS=TDTEXT> <a  href=tc20functionb.htm#bioskey> bioskey</a></td>
</tr>



<tr>
<td CLASS=TDTEXT>不回显的字符输入 </td>
<td CLASS=TDTEXT> 单个字符输入</td>
<td CLASS=TDTEXT> int  getch( )</td>
<td CLASS=TDTEXT> <a  href=tc20functiong.htm#getch>getch </a></td>
</tr>


<tr>
<td CLASS=TDTEXT>回显的字符输入 </td>
<td CLASS=TDTEXT> 单个符输入</td>
<td CLASS=TDTEXT> int  getche( )</td>
<td CLASS=TDTEXT> <a  href=tc20functiong.htm#getche>getche </a></td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT>字符串输入 </td>
<td CLASS=TDTEXT> char *gets(char *str )</td>
<td CLASS=TDTEXT> <a  href=tc20functiong.htm#gets>gets </a></td>
</tr>


<tr>
<td CLASS=TDTEXT>回显的数值输入 </td>
<td CLASS=TDTEXT> 格式输入</td>
<td CLASS=TDTEXT>int  scanf(char *format,arg1,arg2..) </td>
<td CLASS=TDTEXT> <a  href=tc20functions.htm#scanf> scanf</a></td>
</tr>


</table>  <!-- class=tc20funcationname end -->
</td>
</tr>     <!-- class=funnameline -->




<tr id="coniofun" class=funnameline>
<td>
<table class=tc20funcationname >
<col width=20%>
<col width=20%>
<col width=50%>
<col width=10%>
<tr>
<td class=TDHEAD colspan=4 >
<b> 字符屏幕输出函数</b>
</td>
<tr>

<tr>
<td CLASS=TDTEXT colspan=4>

<b>2种显示模式</b>  在PC机中，屏幕的显示分为2种工作方式，一种是字符屏幕方式，一种
是图形屏幕方式，DOS显示属于字符方式，而Windows属于图形屏幕方式，在前者的工作方式
下，屏幕只能显示因为字符，而后者可显示任意的图形符号。<br>
字符方式下，显示内存中存放的是显示文本的ASCII码和显示颜色的控制位，计算机的显示卡
将显存中的字符通过字符库转换成点阵数据再放到屏幕上显示。在字符方式下，由于显示内存
中仅仅是屏幕显示符号的ASCII码，因此所须显示内存很少。<br>
<b>字符窗口和字符坐标</b>  字符方式下，我们可以将整个屏幕作为一个字符窗口来进行输
出操作，也可将其中的一个矩形区域作为一个操作窗口，后者需要通过专用的函数来定义该窗
口，字符显示的坐标是以屏幕的左上角或字符窗口的左上角作为原点的，如下图，横向为x:

<table border=1 align=center width=250  rules=none frame=box bgcolor=rgb(224,234,200)> 

<tr class=trwindowline><td>1,1</td><td>X方向</td><td>80，1</td></tr>

<tr class=trwindowline><td>&nbsp<br>Y<br>方<br>向&nbsp<br></td> <td> &nbsp<br>80*25列显示方式<br>字符屏幕坐标</td><td></td></tr>

<tr class=trwindowline><td>1，25</td><td></td><td>80，25</td></tr>

</table>

<b>字符屏幕输出函数的使用</b>  TC20提供了很多类型的字符输出函数，有一些函数可以使用
光标控制函数(gotoxy()函数)来指定其显示位置，如：cprintf(),cputs(),putch();而另外一
些不能控制显示位置，如:printf(), puts(), putc(), putchar(),在使用时必须加以选择。实
际上所有输出到标准流（stdout）中的函数均不能使用颜色和位置控制函数。<br>
<b>头文件</b>   stdio.h,  conio.h,  io.h<br>
<b>函数列表</b>
</td>
</tr>

<tr>
<td CLASS=TDTEXT> 函数类别</td>
<td CLASS=TDTEXT> 函数用途</td>
<td CLASS=TDTEXT> 函数申明</td>
<td CLASS=TDTEXT> 详细说明</td>
</tr>

<tr>
<td CLASS=TDTEXT>初始化 </td>
<td CLASS=TDTEXT>分辨率设置 </td>
<td CLASS=TDTEXT> void textmode(int mode)</td>
<td CLASS=TDTEXT> <a  href=tc20functiont.htm#textmode> textmode</a></td>
</tr>


<tr>
<td CLASS=TDTEXT> 普通屏幕输出</td>
<td CLASS=TDTEXT> 背景颜色设置</td>
<td CLASS=TDTEXT>void textbackground(int color ) </td>
<td CLASS=TDTEXT> <a  href=tc20functiont.htm#textbackground> textbackground</a></td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> 字符颜色设置</td>
<td CLASS=TDTEXT>void textcolor(int color ) </td>
<td CLASS=TDTEXT> <a  href=tc20functiont.htm#textcolor> textcolor</a></td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> 显示位置设置</td>
<td CLASS=TDTEXT>void  gotoxy( int x, int y) </td>
<td CLASS=TDTEXT> <a  href=tc20functiong.htm#gotoxy> gotoxy</a></td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT>格式字符输出 </td>
<td CLASS=TDTEXT>printf(char *format, arg1,arg2,arg3。。。) </td>
<td CLASS=TDTEXT> <a  href=tc20functionp.htm#printf> printf</a></td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT>单个字符输出 </td>
<td CLASS=TDTEXT>putch(int ch)<br>putchar(int ch) </td>
<td CLASS=TDTEXT> <a  href=tc20functionp.htm#putch>putch </a><br>
<a  href=tc20functionp.htm#putchar>putchar </a>
</td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT>字符串输出 </td>
<td CLASS=TDTEXT> puts(char *str ) </td>
<td CLASS=TDTEXT> <a  href=tc20functionp.htm#puts> puts</a></td>
</tr>


<tr>
<td CLASS=TDTEXT> 字符窗口控制</td>
<td CLASS=TDTEXT> 字符窗口设置</td>
<td CLASS=TDTEXT>void window(int left int top, int right, int bottom ) </td>
<td CLASS=TDTEXT> <a  href=tc20functionw.htm#window> window</a></td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT>清除窗口  </td>
<td CLASS=TDTEXT>  void clrscr( void )<br>void clrol(void)</td>
<td CLASS=TDTEXT> <a  href=tc20functionc.htm#clrsrc> clrscr</a><br>
<a  href=tc20functionc.htm#clrol> clrol</a></td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT>光标控制<br>背景颜色控制<br>文字颜色控制</td>
<td CLASS=TDTEXT>gotoxy(int x,int y )<br>
textbackcolor(int color )<br>
textcolor ((int color)
</td>
<td CLASS=TDTEXT> 
<a  href=tc20functiong.htm#gotoxy> gotoxy</a><br>
<a  href=tc20functiont.htm#textbackcolor> textbackcolor</a><br>
<a  href=tc20functiont.htm#textcolor>textcolor</a>
</td>
</tr>


<tr>
<td CLASS=TDTEXT>窗口中的字符输出 </td>
<td CLASS=TDTEXT>单个字符输出 </td>
<td CLASS=TDTEXT> putch(int ch )<br>putchar(int ch )</td>
<td CLASS=TDTEXT> 
<a  href=tc20functionp.htm#putch>putch </a><br>
<a  href=tc20functionp.htm#putchar>putchar </a>
</td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> 一行字符串输出</td>
<td CLASS=TDTEXT>int cputs(char *str ) </td>
<td CLASS=TDTEXT> <a  href=tc20functionc.htm#cputs> cputs</a></td>
</tr>



</table>  <!-- class=tc20funcationname end -->
</td>
</tr>     <!-- class=funnameline -->



<tr id="graphfun" class=funnameline>
<td>
<table class=tc20funcationname >
<col width=20%>
<col width=20%>
<col width=50%>
<col width=10%>
<tr>
<td class=TDHEAD colspan=4 >
<b>  图形屏幕输出函数</b>
</td>
<tr>

<tr>
<td CLASS=TDTEXT colspan=4>
<b>基本知识</b>  在图形屏幕下，显示内存中的数据和屏幕上的一个点相对应。
因为要表示颜色，所以屏幕上的一个点，在显示存储器中可能是4位（16色），
8位（256色）甚至16位或24位数据。在图形方式下，由于显示内存的数据和屏幕
显示的点一一对应，因此所须显示内存很大。<br>
<b>屏幕坐标</b>  无论是图形屏幕，还是字符屏幕，TC20的操作函数均将屏幕的
左上脚定位显示坐标的原点，并且横向为X坐标，纵向为Y坐标，如下图：

<table border=1 align=center width=250  rules=none frame=box bgcolor=rgb(224,234,200)> 

<tr class=trwindowline><td>0,0</td><td>X方向</td><td>639，0</td></tr>

<tr class=trwindowline><td>&nbsp<br>Y<br>方<br>向&nbsp<br></td> <td> &nbsp<br>640*480图形显示方式<br>图形屏幕坐标</td><td></td></tr>

<tr class=trwindowline><td>0，478</td><td></td><td>639，479</td></tr>
</table>
&nbsp&nbsp&nbsp&nbsp注意，图形方式下的坐标原点为(0,0),而字符模式下为（1，1）<br>		
<b>图形操作步骤</b> 任何图形函数均要按以下步骤进行：<br>
	&nbsp&nbsp&nbsp&nbspA：初始化，使图形卡（硬件）工作在需要的模式<br>
	&nbsp&nbsp&nbsp&nbspB：设置会图颜色和绘图方式<br>
	&nbsp&nbsp&nbsp&nbspC：退出设置的图形卡（硬件）工作模式<br>
<b>头文件</b>  GRAPHICS.H<br>
<b>函数列表</b>
</td>
</tr>

<tr>
<td CLASS=TDTEXT> 函数类别</td>
<td CLASS=TDTEXT> 函数用途</td>
<td CLASS=TDTEXT> 函数申明</td>
<td CLASS=TDTEXT> 详细说明</td>
</tr>

<tr>
<td CLASS=TDTEXT>图形模式设置 </td>
<td CLASS=TDTEXT> 图形库注册</td>
<td CLASS=TDTEXT>registerbgidriver(void far *driver ) </td>
<td CLASS=TDTEXT> <a  href=tc20functionr.htm#registerbgidriver>registerbgidriver </a></td>
</tr>

<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> 图形方式字体注册</td>
<td CLASS=TDTEXT> registerbgifont(void far *font)</td>
<td CLASS=TDTEXT> <a  href=tc20functionr.htm#registerbgifont>registerbgifont </a></td>
</tr>

<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> 显示方式初始化</td>
<td CLASS=TDTEXT> initgraph(int  far *graphdriver,int  far *graphmode,char far *pathtodriver )</td>
<td CLASS=TDTEXT> <a  href=tc20functioni.htm#initgraph> initgraph</a></td>
</tr>

<tr>
<td CLASS=TDTEXT></td>
<td CLASS=TDTEXT> 退出图形方式 </td>
<td CLASS=TDTEXT>void far restorecrtmode(  ) </td>
<td CLASS=TDTEXT> <a  href=tc20functionr.htm#restorecrtmode> restorecrtmode</a></td>
</tr>

<tr>
<td CLASS=TDTEXT> 绘图</td>
<td CLASS=TDTEXT> 颜色设置</td>
<td CLASS=TDTEXT> setcolor(int color);</td>
<td CLASS=TDTEXT> <a  href=tc20functions.htm#setcolor> setcolor</a></td>
</tr>

<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT>画直线 </td>
<td CLASS=TDTEXT>line(int x1, int  y1,  int x2,  int y2 ) </td>
<td CLASS=TDTEXT> <a  href=tc20functionl.htm#line>line </a></td>
</tr>

<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> <a  href=tc20function.htm#> </a></td>
</tr>

<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> 画圆</td>
<td CLASS=TDTEXT>circle( int  x,  int  y, int  radius ) </td>
<td CLASS=TDTEXT> <a  href=tc20functionc.htm#circle>circle </a></td>
</tr>

<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT>画点 </td>
<td CLASS=TDTEXT>putpixel(int x,int y,int color); </td>
<td CLASS=TDTEXT> <a  href=tc20functionp.htm#putpixel> putpixel</a></td>
</tr>

<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT>画矩形框 </td>
<td CLASS=TDTEXT>int rectangle(int left int top, int right, int bottom ) </td>
<td CLASS=TDTEXT> <a  href=tc20functionr.htm#rectangle> rectangle</a></td>
</tr>

<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT>设置矩形面积中间的填充风格 </td>
<td CLASS=TDTEXT>setfillstyle(int pattern,int color); </td>
<td CLASS=TDTEXT> <a  href=tc20functions.htm#setfillstyle> setfillstyle</a></td>
</tr>

<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> 画矩形面积</td>
<td CLASS=TDTEXT> bar(int left,int top,int right,int bottom);</td>
<td CLASS=TDTEXT> <a  href=tc20functionb.htm#bar>bar </a></td>
</tr>

<tr>
<td CLASS=TDTEXT>图形方式下的字符显示 </td>
<td CLASS=TDTEXT>显示字体设置 </td>
<td CLASS=TDTEXT> void far settextstyle(int font, int direction, int size )</td>
<td CLASS=TDTEXT> <a  href=tc20functions.htm#settextstyle> settextstyle</a></td>
</tr>

<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT>字符显示 </td>
<td CLASS=TDTEXT> outtextxy(int x,int y,char *str);</td>
<td CLASS=TDTEXT> <a  href=tc20functiono.htm#outtextxy> outtextxy </a></td>
</tr>


</table>  <!-- class=tc20funcationname end -->
</td>
</tr>     <!-- class=funnameline -->


<tr id="strfun" class=funnameline>
<td>
<table class=tc20funcationname >
<col width=20%>
<col width=20%>
<col width=50%>
<col width=10%>
<tr>
<td class=TDHEAD colspan=4 >
<b>  字符串处理函数</b>
</td>
<tr>

<tr>
<td CLASS=TDTEXT colspan=4>
<b>头文件</b>  string.h <br>
<b>函数列表</b>
</td>
</tr>

<tr>
<td CLASS=TDTEXT> 函数类别</td>
<td CLASS=TDTEXT> 函数用途</td>
<td CLASS=TDTEXT> 函数申明</td>
<td CLASS=TDTEXT> 详细说明</td>
</tr>

<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> 字符串比较</td>
<td CLASS=TDTEXT>int strcmp(char *str1, char *str2) </td>
<td CLASS=TDTEXT> <a  href=tc20functions.htm#strcmp> strcmp</a></td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> 字符串拷贝</td>
<td CLASS=TDTEXT> char *strcpy( char *str1,char *str2 )</td>
<td CLASS=TDTEXT> <a  href=tc20functions.htm#strcpy> strcpy</a></td>
</tr>



<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> 字符串合并</td>
<td CLASS=TDTEXT> char *strcat( char *str1,char *str2 )</td>
<td CLASS=TDTEXT> <a  href=tc20functions.htm#strcat>strcat </a></td>
</tr>




</table>  <!-- class=tc20funcationname end -->
</td>
</tr>     <!-- class=funnameline -->




<tr id="memfun" class=funnameline>
<td>
<table class=tc20funcationname >
<col width=20%>
<col width=20%>
<col width=50%>
<col width=10%>
<tr>
<td class=TDHEAD colspan=4 >
<b>  内存操作函数</b>
</td>
<tr>

<tr>
<td CLASS=TDTEXT colspan=4>
<b>内容说明</b>  在数据结构的链表编程中，常使用内存申请和释放函数来生成节点，以下给出了常用的内
存操作函数，必须注意的是内存操作函数是和系统的编译模式相关的，区分为堆内存、远
堆内存操作，不同的函数操作的内存的位置和可用空间的大小不同。同时和TC20的编译模
式有关，一般情况下将TC20的菜单 "Options\Compile\mode"设置为"large"(大模式)即可，
如需要使用巨指针（huge）,必须设置为巨模式 。<br>
&nbsp&nbsp&nbsp&nbsp内存操作函数包括2类：内存申请和内存释放。在使用时必须注意释
放不需要的内存指针，否则会导致内存耗尽，从而使程序不能正常运行。<br>
<b>头文件</b>  alloc.h, stdlib.h<br>
<b>函数列表</b>
</td>
</tr>

<tr>
<td CLASS=TDTEXT> 函数类别</td>
<td CLASS=TDTEXT> 函数用途</td>
<td CLASS=TDTEXT> 函数申明</td>
<td CLASS=TDTEXT> 详细说明</td>
</tr>

<tr>
<td CLASS=TDTEXT>堆内存操作 </td>
<td CLASS=TDTEXT> 内存申请</td>
<td CLASS=TDTEXT> void  *malloc( unsigned  size )</td>
<td CLASS=TDTEXT> <a  href=tc20functionm.htm#malloc> malloc</a></td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT>内存释放 </td>
<td CLASS=TDTEXT> void free(void *ptr )</td>
<td CLASS=TDTEXT> <a  href=tc20functionf.htm#free>free </a></td>
</tr>


<tr>
<td CLASS=TDTEXT> 远堆内存操作</td>
<td CLASS=TDTEXT> 内存申请</td>
<td CLASS=TDTEXT>  void  *farmalloc( unsigned  long size </td>
<td CLASS=TDTEXT> <a  href=tc20functionf.htm#farmalloc> farmalloc</a></td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT>内存释放 </td>
<td CLASS=TDTEXT> void farfree(void *ptr )</td>
<td CLASS=TDTEXT> <a  href=tc20functionf.htm#farfree>farfree </a></td>
</tr>

</table>  <!-- class=tc20funcationname end -->
</td>
</tr>     <!-- class=funnameline -->




<tr id="mathfun" class=funnameline>
<td>
<table class=tc20funcationname >
<col width=20%>
<col width=20%>
<col width=50%>
<col width=10%>
<tr>
<td class=TDHEAD colspan=4 >
<b> 数学函数</b>
</td>
<tr>

<tr>
<td CLASS=TDTEXT colspan=4>
<b>函数列表</b>
</td>
</tr>

<tr>
<td CLASS=TDTEXT> 函数类别</td>
<td CLASS=TDTEXT> 函数用途</td>
<td CLASS=TDTEXT> 函数申明</td>
<td CLASS=TDTEXT> 详细说明</td>
</tr>

<tr>
<td CLASS=TDTEXT>三角函数 </td>
<td CLASS=TDTEXT> 正弦</td>
<td CLASS=TDTEXT> double sin( doube arg )</td>
<td CLASS=TDTEXT> <a  href=tc20functions.htm#sin>sin </a></td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> 余弦</td>
<td CLASS=TDTEXT> double cos( doube arg )</td>
<td CLASS=TDTEXT> <a  href=tc20functionc.htm#cos>cos </a></td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> 正切</td>
<td CLASS=TDTEXT> double tan(double arg)</td>
<td CLASS=TDTEXT> <a  href=tc20functiont.htm#tan>tan </a></td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> 反正弦</td>
<td CLASS=TDTEXT> double asin( doube arg )</td>
<td CLASS=TDTEXT> <a  href=tc20functiona.htm#asin>asin </a></td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT>反余弦 </td>
<td CLASS=TDTEXT> double acos( doube arg )</td>
<td CLASS=TDTEXT> <a  href=tc20functiona.htm#acos> acos</a></td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT>反正切 </td>
<td CLASS=TDTEXT>double atan( doube arg ) </td>
<td CLASS=TDTEXT> <a  href=tc20functiona.htm#atan>atan </a></td>
</tr>


<tr>
<td CLASS=TDTEXT> 幂和对数</td>
<td CLASS=TDTEXT>幂函数 </td>
<td CLASS=TDTEXT>double pow(double base , double exp ) </td>
<td CLASS=TDTEXT> <a  href=tc20functionp.htm#pow> pow</a></td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> 自然对数</td>
<td CLASS=TDTEXT> double log(double num )</td>
<td CLASS=TDTEXT> <a  href=tc20functionl.htm#log> log</a></td>
</tr>


<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT>以10为底对数 </td>
<td CLASS=TDTEXT>double log10(double num ) </td>
<td CLASS=TDTEXT> <a  href=tc20functionl.htm#log10> log10</a></td>
</tr>


</table>  <!-- class=tc20funcationname end -->
</td>
</tr>     <!-- class=funnameline -->





<tr id="hardwarefun" class=funnameline>
<td>
<table class=tc20funcationname >
<col width=20%>
<col width=20%>
<col width=50%>
<col width=10%>
<tr>
<td class=TDHEAD colspan=4 >
<b> 硬件操作函数</b>
</td>
<tr>

<tr>
<td CLASS=TDTEXT colspan=4>
<b>说明</b> 硬件操作函数可以直接对各种硬件芯片和接口电路进行操作。用途有二个，
一：编写底层硬件驱动软件，如硬盘操作，串并口通信，显示控制等；二：用于设计控制
插入PC机总线的专用电路板软件。<br>
<b>头文件：</b> dos.h <br>
<b>函数列表</b>

</td>
</tr>

<tr>
<td CLASS=TDTEXT> 函数类别</td>
<td CLASS=TDTEXT> 函数用途</td>
<td CLASS=TDTEXT> 函数申明</td>
<td CLASS=TDTEXT> 详细说明</td>
</tr>

<tr>
<td CLASS=TDTEXT>I/O接口访问函数 </td>
<td CLASS=TDTEXT> 输入操作</td>
<td CLASS=TDTEXT> unsigned char inportb(int  portid )<br>
int  inport(int  portid )
</td>
<td CLASS=TDTEXT> <a  href=tc20functioni.htm#inportb>inportb </a><br>
 <a  href=tc20functioni.htm#inport>inport </a>
</td>
</tr>



<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> 输出操作</td>
<td CLASS=TDTEXT> void  outportb(int portid, unsigned char value )<br>
void  outport(int portid, int  value )</td>
<td CLASS=TDTEXT> <a  href=tc20functiono.htm#outportb> outportb </a><br>
<a  href=tc20functiono.htm#outport> outport </a>
</td>
</tr>




<tr>
<td CLASS=TDTEXT> 存储器访问</td>
<td CLASS=TDTEXT> 写存储器</td>
<td CLASS=TDTEXT> void pokeb(unsigned  segment , unsigned offset,char value )<br>
poke(unsigned  segment , unsigned offset, int  value )</td>
<td CLASS=TDTEXT> <a  href=tc20functionp.htm#pokeb> pokeb</a><br>
 <a  href=tc20functionp.htm#poke> poke</a>
</td>
</tr>



<tr>
<td CLASS=TDTEXT> </td>
<td CLASS=TDTEXT> 读存储器</td>
<td CLASS=TDTEXT> char  peekb(unsigned  segment , unsigned  offset )<br>
int  peek(unsigned  segment , unsigned offset )</td>
<td CLASS=TDTEXT> <a  href=tc20functionp.htm#peekb> peekb</a><br>
 <a  href=tc20functionp.htm#peek> peek</a>
</td>
</tr>



</table>  <!-- class=tc20funcationname end -->
</td>
</tr>     <!-- class=funnameline -->




</table>



</BODY>
</HTML>